// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package generated

type Projects struct {
	// AssigneeType corresponds to the JSON schema field "assigneeType".
	AssigneeType *string `json:"assigneeType,omitempty"`

	// AvatarUrls corresponds to the JSON schema field "avatarUrls".
	AvatarUrls ProjectsAvatarUrls `json:"avatarUrls,omitempty"`

	// Components corresponds to the JSON schema field "components".
	Components []ProjectsComponentsElem `json:"components,omitempty"`

	// Description corresponds to the JSON schema field "description".
	Description *string `json:"description,omitempty"`

	// Email corresponds to the JSON schema field "email".
	Email *string `json:"email,omitempty"`

	// Expand corresponds to the JSON schema field "expand".
	Expand *string `json:"expand,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id *string `json:"id,omitempty"`

	// IssueTypes corresponds to the JSON schema field "issueTypes".
	IssueTypes []ProjectsIssueTypesElem `json:"issueTypes,omitempty"`

	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Lead corresponds to the JSON schema field "lead".
	Lead *ProjectsLead `json:"lead,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// ProjectCategory corresponds to the JSON schema field "projectCategory".
	ProjectCategory *ProjectsProjectCategory `json:"projectCategory,omitempty"`

	// ProjectKeys corresponds to the JSON schema field "projectKeys".
	ProjectKeys []string `json:"projectKeys,omitempty"`

	// ProjectTypeKey corresponds to the JSON schema field "projectTypeKey".
	ProjectTypeKey *string `json:"projectTypeKey,omitempty"`

	// Roles corresponds to the JSON schema field "roles".
	Roles ProjectsRoles `json:"roles,omitempty"`

	// Self corresponds to the JSON schema field "self".
	Self *string `json:"self,omitempty"`

	// Simplified corresponds to the JSON schema field "simplified".
	Simplified *bool `json:"simplified,omitempty"`

	// Url corresponds to the JSON schema field "url".
	Url *string `json:"url,omitempty"`
}

type ProjectsAvatarUrls map[string]interface{}

type ProjectsComponentsElem struct {
	// Assignee corresponds to the JSON schema field "assignee".
	Assignee *ProjectsComponentsElemAssignee `json:"assignee,omitempty"`

	// AssigneeType corresponds to the JSON schema field "assigneeType".
	AssigneeType *string `json:"assigneeType,omitempty"`

	// Description corresponds to the JSON schema field "description".
	Description *string `json:"description,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id *string `json:"id,omitempty"`

	// IsAssigneeTypeValid corresponds to the JSON schema field "isAssigneeTypeValid".
	IsAssigneeTypeValid *bool `json:"isAssigneeTypeValid,omitempty"`

	// Lead corresponds to the JSON schema field "lead".
	Lead *ProjectsComponentsElemLead `json:"lead,omitempty"`

	// LeadUserName corresponds to the JSON schema field "leadUserName".
	LeadUserName *string `json:"leadUserName,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Project corresponds to the JSON schema field "project".
	Project *string `json:"project,omitempty"`

	// ProjectId corresponds to the JSON schema field "projectId".
	ProjectId *int `json:"projectId,omitempty"`

	// RealAssignee corresponds to the JSON schema field "realAssignee".
	RealAssignee *ProjectsComponentsElemRealAssignee `json:"realAssignee,omitempty"`

	// RealAssigneeType corresponds to the JSON schema field "realAssigneeType".
	RealAssigneeType *string `json:"realAssigneeType,omitempty"`

	// Self corresponds to the JSON schema field "self".
	Self *string `json:"self,omitempty"`
}

type ProjectsComponentsElemAssignee struct {
	// AccountId corresponds to the JSON schema field "accountId".
	AccountId *string `json:"accountId,omitempty"`

	// Active corresponds to the JSON schema field "active".
	Active *bool `json:"active,omitempty"`

	// ApplicationRoles corresponds to the JSON schema field "applicationRoles".
	ApplicationRoles *ProjectsComponentsElemAssigneeApplicationRoles `json:"applicationRoles,omitempty"`

	// AvatarUrls corresponds to the JSON schema field "avatarUrls".
	AvatarUrls ProjectsComponentsElemAssigneeAvatarUrls `json:"avatarUrls,omitempty"`

	// DisplayName corresponds to the JSON schema field "displayName".
	DisplayName *string `json:"displayName,omitempty"`

	// EmailAddress corresponds to the JSON schema field "emailAddress".
	EmailAddress *string `json:"emailAddress,omitempty"`

	// Expand corresponds to the JSON schema field "expand".
	Expand *string `json:"expand,omitempty"`

	// Groups corresponds to the JSON schema field "groups".
	Groups *ProjectsComponentsElemAssigneeGroups `json:"groups,omitempty"`

	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Locale corresponds to the JSON schema field "locale".
	Locale *string `json:"locale,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Self corresponds to the JSON schema field "self".
	Self *string `json:"self,omitempty"`

	// TimeZone corresponds to the JSON schema field "timeZone".
	TimeZone *string `json:"timeZone,omitempty"`
}

type ProjectsComponentsElemAssigneeApplicationRoles struct {
	// Items corresponds to the JSON schema field "items".
	Items []ProjectsComponentsElemAssigneeApplicationRolesItemsElem `json:"items,omitempty"`

	// MaxResults corresponds to the JSON schema field "max-results".
	MaxResults *int `json:"max-results,omitempty"`

	// Size corresponds to the JSON schema field "size".
	Size *int `json:"size,omitempty"`
}

type ProjectsComponentsElemAssigneeApplicationRolesItemsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Self corresponds to the JSON schema field "self".
	Self *string `json:"self,omitempty"`
}

type ProjectsComponentsElemAssigneeAvatarUrls map[string]interface{}

type ProjectsComponentsElemAssigneeGroups struct {
	// Items corresponds to the JSON schema field "items".
	Items []ProjectsComponentsElemAssigneeGroupsItemsElem `json:"items,omitempty"`

	// MaxResults corresponds to the JSON schema field "max-results".
	MaxResults *int `json:"max-results,omitempty"`

	// Size corresponds to the JSON schema field "size".
	Size *int `json:"size,omitempty"`
}

type ProjectsComponentsElemAssigneeGroupsItemsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Self corresponds to the JSON schema field "self".
	Self *string `json:"self,omitempty"`
}

type ProjectsComponentsElemLead struct {
	// AccountId corresponds to the JSON schema field "accountId".
	AccountId *string `json:"accountId,omitempty"`

	// Active corresponds to the JSON schema field "active".
	Active *bool `json:"active,omitempty"`

	// ApplicationRoles corresponds to the JSON schema field "applicationRoles".
	ApplicationRoles *ProjectsComponentsElemLeadApplicationRoles `json:"applicationRoles,omitempty"`

	// AvatarUrls corresponds to the JSON schema field "avatarUrls".
	AvatarUrls ProjectsComponentsElemLeadAvatarUrls `json:"avatarUrls,omitempty"`

	// DisplayName corresponds to the JSON schema field "displayName".
	DisplayName *string `json:"displayName,omitempty"`

	// EmailAddress corresponds to the JSON schema field "emailAddress".
	EmailAddress *string `json:"emailAddress,omitempty"`

	// Expand corresponds to the JSON schema field "expand".
	Expand *string `json:"expand,omitempty"`

	// Groups corresponds to the JSON schema field "groups".
	Groups *ProjectsComponentsElemLeadGroups `json:"groups,omitempty"`

	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Locale corresponds to the JSON schema field "locale".
	Locale *string `json:"locale,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Self corresponds to the JSON schema field "self".
	Self *string `json:"self,omitempty"`

	// TimeZone corresponds to the JSON schema field "timeZone".
	TimeZone *string `json:"timeZone,omitempty"`
}

type ProjectsComponentsElemLeadApplicationRoles struct {
	// Items corresponds to the JSON schema field "items".
	Items []ProjectsComponentsElemLeadApplicationRolesItemsElem `json:"items,omitempty"`

	// MaxResults corresponds to the JSON schema field "max-results".
	MaxResults *int `json:"max-results,omitempty"`

	// Size corresponds to the JSON schema field "size".
	Size *int `json:"size,omitempty"`
}

type ProjectsComponentsElemLeadApplicationRolesItemsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Self corresponds to the JSON schema field "self".
	Self *string `json:"self,omitempty"`
}

type ProjectsComponentsElemLeadAvatarUrls map[string]interface{}

type ProjectsComponentsElemLeadGroups struct {
	// Items corresponds to the JSON schema field "items".
	Items []ProjectsComponentsElemLeadGroupsItemsElem `json:"items,omitempty"`

	// MaxResults corresponds to the JSON schema field "max-results".
	MaxResults *int `json:"max-results,omitempty"`

	// Size corresponds to the JSON schema field "size".
	Size *int `json:"size,omitempty"`
}

type ProjectsComponentsElemLeadGroupsItemsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Self corresponds to the JSON schema field "self".
	Self *string `json:"self,omitempty"`
}

type ProjectsComponentsElemRealAssignee struct {
	// AccountId corresponds to the JSON schema field "accountId".
	AccountId *string `json:"accountId,omitempty"`

	// Active corresponds to the JSON schema field "active".
	Active *bool `json:"active,omitempty"`

	// ApplicationRoles corresponds to the JSON schema field "applicationRoles".
	ApplicationRoles *ProjectsComponentsElemRealAssigneeApplicationRoles `json:"applicationRoles,omitempty"`

	// AvatarUrls corresponds to the JSON schema field "avatarUrls".
	AvatarUrls ProjectsComponentsElemRealAssigneeAvatarUrls `json:"avatarUrls,omitempty"`

	// DisplayName corresponds to the JSON schema field "displayName".
	DisplayName *string `json:"displayName,omitempty"`

	// EmailAddress corresponds to the JSON schema field "emailAddress".
	EmailAddress *string `json:"emailAddress,omitempty"`

	// Expand corresponds to the JSON schema field "expand".
	Expand *string `json:"expand,omitempty"`

	// Groups corresponds to the JSON schema field "groups".
	Groups *ProjectsComponentsElemRealAssigneeGroups `json:"groups,omitempty"`

	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Locale corresponds to the JSON schema field "locale".
	Locale *string `json:"locale,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Self corresponds to the JSON schema field "self".
	Self *string `json:"self,omitempty"`

	// TimeZone corresponds to the JSON schema field "timeZone".
	TimeZone *string `json:"timeZone,omitempty"`
}

type ProjectsComponentsElemRealAssigneeApplicationRoles struct {
	// Items corresponds to the JSON schema field "items".
	Items []ProjectsComponentsElemRealAssigneeApplicationRolesItemsElem `json:"items,omitempty"`

	// MaxResults corresponds to the JSON schema field "max-results".
	MaxResults *int `json:"max-results,omitempty"`

	// Size corresponds to the JSON schema field "size".
	Size *int `json:"size,omitempty"`
}

type ProjectsComponentsElemRealAssigneeApplicationRolesItemsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Self corresponds to the JSON schema field "self".
	Self *string `json:"self,omitempty"`
}

type ProjectsComponentsElemRealAssigneeAvatarUrls map[string]interface{}

type ProjectsComponentsElemRealAssigneeGroups struct {
	// Items corresponds to the JSON schema field "items".
	Items []ProjectsComponentsElemRealAssigneeGroupsItemsElem `json:"items,omitempty"`

	// MaxResults corresponds to the JSON schema field "max-results".
	MaxResults *int `json:"max-results,omitempty"`

	// Size corresponds to the JSON schema field "size".
	Size *int `json:"size,omitempty"`
}

type ProjectsComponentsElemRealAssigneeGroupsItemsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Self corresponds to the JSON schema field "self".
	Self *string `json:"self,omitempty"`
}

type ProjectsIssueTypesElem struct {
	// AvatarId corresponds to the JSON schema field "avatarId".
	AvatarId *int `json:"avatarId,omitempty"`

	// Description corresponds to the JSON schema field "description".
	Description *string `json:"description,omitempty"`

	// IconUrl corresponds to the JSON schema field "iconUrl".
	IconUrl *string `json:"iconUrl,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id *string `json:"id,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Self corresponds to the JSON schema field "self".
	Self *string `json:"self,omitempty"`

	// Subtask corresponds to the JSON schema field "subtask".
	Subtask *bool `json:"subtask,omitempty"`
}

type ProjectsLead struct {
	// AccountId corresponds to the JSON schema field "accountId".
	AccountId *string `json:"accountId,omitempty"`

	// Active corresponds to the JSON schema field "active".
	Active *bool `json:"active,omitempty"`

	// ApplicationRoles corresponds to the JSON schema field "applicationRoles".
	ApplicationRoles *ProjectsLeadApplicationRoles `json:"applicationRoles,omitempty"`

	// AvatarUrls corresponds to the JSON schema field "avatarUrls".
	AvatarUrls ProjectsLeadAvatarUrls `json:"avatarUrls,omitempty"`

	// DisplayName corresponds to the JSON schema field "displayName".
	DisplayName *string `json:"displayName,omitempty"`

	// EmailAddress corresponds to the JSON schema field "emailAddress".
	EmailAddress *string `json:"emailAddress,omitempty"`

	// Expand corresponds to the JSON schema field "expand".
	Expand *string `json:"expand,omitempty"`

	// Groups corresponds to the JSON schema field "groups".
	Groups *ProjectsLeadGroups `json:"groups,omitempty"`

	// Key corresponds to the JSON schema field "key".
	Key *string `json:"key,omitempty"`

	// Locale corresponds to the JSON schema field "locale".
	Locale *string `json:"locale,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Self corresponds to the JSON schema field "self".
	Self *string `json:"self,omitempty"`

	// TimeZone corresponds to the JSON schema field "timeZone".
	TimeZone *string `json:"timeZone,omitempty"`
}

type ProjectsLeadApplicationRoles struct {
	// Items corresponds to the JSON schema field "items".
	Items []ProjectsLeadApplicationRolesItemsElem `json:"items,omitempty"`

	// MaxResults corresponds to the JSON schema field "max-results".
	MaxResults *int `json:"max-results,omitempty"`

	// Size corresponds to the JSON schema field "size".
	Size *int `json:"size,omitempty"`
}

type ProjectsLeadApplicationRolesItemsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Self corresponds to the JSON schema field "self".
	Self *string `json:"self,omitempty"`
}

type ProjectsLeadAvatarUrls map[string]interface{}

type ProjectsLeadGroups struct {
	// Items corresponds to the JSON schema field "items".
	Items []ProjectsLeadGroupsItemsElem `json:"items,omitempty"`

	// MaxResults corresponds to the JSON schema field "max-results".
	MaxResults *int `json:"max-results,omitempty"`

	// Size corresponds to the JSON schema field "size".
	Size *int `json:"size,omitempty"`
}

type ProjectsLeadGroupsItemsElem struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Self corresponds to the JSON schema field "self".
	Self *string `json:"self,omitempty"`
}

type ProjectsProjectCategory struct {
	// Description corresponds to the JSON schema field "description".
	Description *string `json:"description,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id *string `json:"id,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Self corresponds to the JSON schema field "self".
	Self *string `json:"self,omitempty"`
}

type ProjectsRoles map[string]interface{}
