// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package generated

import "time"

type Issues struct {
	// SdcRepository corresponds to the JSON schema field "_sdc_repository".
	SdcRepository *string `json:"_sdc_repository,omitempty"`

	// Assignee corresponds to the JSON schema field "assignee".
	Assignee IssuesAssignee `json:"assignee,omitempty"`

	// AuthorAssociation corresponds to the JSON schema field "author_association".
	AuthorAssociation *string `json:"author_association,omitempty"`

	// Body corresponds to the JSON schema field "body".
	Body *string `json:"body,omitempty"`

	// ClosedAt corresponds to the JSON schema field "closed_at".
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// Comments corresponds to the JSON schema field "comments".
	Comments *int `json:"comments,omitempty"`

	// CommentsUrl corresponds to the JSON schema field "comments_url".
	CommentsUrl *string `json:"comments_url,omitempty"`

	// CreatedAt corresponds to the JSON schema field "created_at".
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// EventsUrl corresponds to the JSON schema field "events_url".
	EventsUrl *string `json:"events_url,omitempty"`

	// HtmlUrl corresponds to the JSON schema field "html_url".
	HtmlUrl *string `json:"html_url,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id *string `json:"id,omitempty"`

	// Labels corresponds to the JSON schema field "labels".
	Labels []IssuesLabelsElem `json:"labels,omitempty"`

	// LabelsUrl corresponds to the JSON schema field "labels_url".
	LabelsUrl *string `json:"labels_url,omitempty"`

	// Locked corresponds to the JSON schema field "locked".
	Locked *bool `json:"locked,omitempty"`

	// Milestone corresponds to the JSON schema field "milestone".
	Milestone *IssuesMilestone `json:"milestone,omitempty"`

	// NodeId corresponds to the JSON schema field "node_id".
	NodeId *string `json:"node_id,omitempty"`

	// Number corresponds to the JSON schema field "number".
	Number *int `json:"number,omitempty"`

	// PullRequest corresponds to the JSON schema field "pull_request".
	PullRequest *IssuesPullRequest `json:"pull_request,omitempty"`

	// RepositoryUrl corresponds to the JSON schema field "repository_url".
	RepositoryUrl *string `json:"repository_url,omitempty"`

	// State corresponds to the JSON schema field "state".
	State *string `json:"state,omitempty"`

	// Title corresponds to the JSON schema field "title".
	Title *string `json:"title,omitempty"`

	// UpdatedAt corresponds to the JSON schema field "updated_at".
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// Url corresponds to the JSON schema field "url".
	Url *string `json:"url,omitempty"`

	// User corresponds to the JSON schema field "user".
	User *IssuesUser `json:"user,omitempty"`
}

type IssuesAssignee map[string]interface{}

type IssuesLabelsElem struct {
	// Color corresponds to the JSON schema field "color".
	Color *string `json:"color,omitempty"`

	// Default corresponds to the JSON schema field "default".
	Default *bool `json:"default,omitempty"`

	// Description corresponds to the JSON schema field "description".
	Description *string `json:"description,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id *int `json:"id,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// NodeId corresponds to the JSON schema field "node_id".
	NodeId *string `json:"node_id,omitempty"`

	// Url corresponds to the JSON schema field "url".
	Url *string `json:"url,omitempty"`
}

type IssuesMilestone struct {
	// Id corresponds to the JSON schema field "id".
	Id *int `json:"id,omitempty"`
}

type IssuesPullRequest struct {
	// DiffUrl corresponds to the JSON schema field "diff_url".
	DiffUrl *string `json:"diff_url,omitempty"`

	// HtmlUrl corresponds to the JSON schema field "html_url".
	HtmlUrl *string `json:"html_url,omitempty"`

	// PatchUrl corresponds to the JSON schema field "patch_url".
	PatchUrl *string `json:"patch_url,omitempty"`

	// Url corresponds to the JSON schema field "url".
	Url *string `json:"url,omitempty"`
}

type IssuesUser struct {
	// AvatarUrl corresponds to the JSON schema field "avatar_url".
	AvatarUrl *string `json:"avatar_url,omitempty"`

	// EventsUrl corresponds to the JSON schema field "events_url".
	EventsUrl *string `json:"events_url,omitempty"`

	// FollowersUrl corresponds to the JSON schema field "followers_url".
	FollowersUrl *string `json:"followers_url,omitempty"`

	// FollowingUrl corresponds to the JSON schema field "following_url".
	FollowingUrl *string `json:"following_url,omitempty"`

	// GistsUrl corresponds to the JSON schema field "gists_url".
	GistsUrl *string `json:"gists_url,omitempty"`

	// GravatarId corresponds to the JSON schema field "gravatar_id".
	GravatarId *string `json:"gravatar_id,omitempty"`

	// HtmlUrl corresponds to the JSON schema field "html_url".
	HtmlUrl *string `json:"html_url,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id *int `json:"id,omitempty"`

	// Login corresponds to the JSON schema field "login".
	Login *string `json:"login,omitempty"`

	// NodeId corresponds to the JSON schema field "node_id".
	NodeId *string `json:"node_id,omitempty"`

	// OrganizationsUrl corresponds to the JSON schema field "organizations_url".
	OrganizationsUrl *string `json:"organizations_url,omitempty"`

	// ReceivedEventsUrl corresponds to the JSON schema field "received_events_url".
	ReceivedEventsUrl *string `json:"received_events_url,omitempty"`

	// ReposUrl corresponds to the JSON schema field "repos_url".
	ReposUrl *string `json:"repos_url,omitempty"`

	// SiteAdmin corresponds to the JSON schema field "site_admin".
	SiteAdmin *bool `json:"site_admin,omitempty"`

	// StarredUrl corresponds to the JSON schema field "starred_url".
	StarredUrl *string `json:"starred_url,omitempty"`

	// SubscriptionsUrl corresponds to the JSON schema field "subscriptions_url".
	SubscriptionsUrl *string `json:"subscriptions_url,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty"`

	// Url corresponds to the JSON schema field "url".
	Url *string `json:"url,omitempty"`
}
